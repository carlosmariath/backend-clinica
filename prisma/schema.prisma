generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id                String            @id @default(uuid())
  name              String
  address           String
  phone             String
  email             String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  appointments      Appointment[]
  schedules         Schedule[]
  services          Service[]
  therapistBranches TherapistBranch[]
  users             User[]
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(CLIENT)
  createdAt    DateTime      @default(now())
  phone        String        @unique
  branchId     String?
  appointments Appointment[]
  ChatSession  ChatSession[]
  branch       Branch?       @relation(fields: [branchId], references: [id])
}

model Therapist {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  phone             String
  specialty         String
  createdAt         DateTime           @default(now())
  appointments      Appointment[]
  schedules         Schedule[]
  therapistBranches TherapistBranch[]
  therapistServices TherapistService[]
}

model TherapistBranch {
  id          String    @id @default(uuid())
  therapistId String
  branchId    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, branchId])
}

model Schedule {
  id          String    @id @default(uuid())
  therapistId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  branchId    String
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String            @id @default(uuid())
  clientId    String
  therapistId String
  date        DateTime
  startTime   String
  endTime     String
  status      AppointmentStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  branchId    String?
  branch      Branch?           @relation(fields: [branchId], references: [id])
  client      User              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapist   Therapist         @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String
  phoneNumber String   @unique
  history     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id         String             @id @default(uuid())
  question   String             @unique
  answer     String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  categoryId String?
  createdBy  String?
  enabled    Boolean            @default(true)
  tags       String[]
  viewCount  Int                @default(0)
  questions  FrequentQuestion[]
  category   KnowledgeCategory? @relation(fields: [categoryId], references: [id])
}

model KnowledgeCategory {
  id               String          @id @default(uuid())
  name             String          @unique
  description      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  knowledgeEntries KnowledgeBase[]
}

model FrequentQuestion {
  id             String         @id @default(uuid())
  question       String
  count          Int            @default(1)
  lastAskedAt    DateTime       @default(now())
  knowledgeId    String?
  autoDetected   Boolean        @default(true)
  knowledgeEntry KnowledgeBase? @relation(fields: [knowledgeId], references: [id])
}

model Service {
  id              String             @id @default(uuid())
  name            String             @unique
  description     String?
  price           Float
  averageDuration Int                @default(60)
  branchId        String?
  branch          Branch?            @relation(fields: [branchId], references: [id])
  therapists      TherapistService[]
}

model TherapistService {
  id          String    @id @default(uuid())
  therapistId String
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  THERAPIST
  RECEPTIONIST
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}
