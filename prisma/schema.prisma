// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  phone        String        @unique
  role         Role          @default(CLIENT)
  appointments Appointment[] // 游댳 Rela칞칚o com agendamentos
  createdAt    DateTime      @default(now())
  ChatSession  ChatSession[]
}

enum Role {
  ADMIN
  THERAPIST
  RECEPTIONIST
  CLIENT
}

model Therapist {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  phone        String
  specialty    String
  schedules    Schedule[] // 游댳 Rela칞칚o com hor치rios dispon칤veis
  appointments Appointment[] // 游댳 Rela칞칚o com agendamentos
  createdAt    DateTime      @default(now())
}

model Schedule {
  id          String @id @default(uuid())
  therapistId String
  dayOfWeek   Int // 0 = Domingo, 1 = Segunda, ..., 6 = S치bado
  startTime   String // Exemplo: "09:00"
  endTime     String // Exemplo: "18:00"

  therapist Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String            @id @default(uuid())
  clientId    String
  therapistId String
  date        DateTime
  startTime   String
  endTime     String
  status      AppointmentStatus @default(PENDING)

  client    User      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  therapist Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String // ID do usu치rio que est치 conversando
  phoneNumber String   @unique
  history     Json // Armazena o hist칩rico da conversa
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id         String   @id @default(uuid())
  question   String   @unique
  answer     String
  categoryId String?
  enabled    Boolean  @default(true)
  tags       String[]
  createdBy  String?  // ID do usu치rio admin que criou
  viewCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  category   KnowledgeCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  questions  FrequentQuestion[]
}

model KnowledgeCategory {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  knowledgeEntries KnowledgeBase[]
}

model FrequentQuestion {
  id             String   @id @default(uuid())
  question       String
  count          Int      @default(1)
  lastAskedAt    DateTime @default(now())
  knowledgeId    String?
  autoDetected   Boolean  @default(true)
  
  knowledgeEntry KnowledgeBase? @relation(fields: [knowledgeId], references: [id], onDelete: SetNull)
}
