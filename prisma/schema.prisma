generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id                       String                    @id @default(uuid())
  name                     String
  address                  String
  phone                    String
  email                    String?
  isActive                 Boolean                   @default(true)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  appointments             Appointment[]
  financialTransactions    FinancialTransaction[]
  schedules                Schedule[]
  services                 Service[]
  subscriptions            Subscription[]
  subscriptionConsumptions SubscriptionConsumption[]
  therapistBranches        TherapistBranch[]
  therapyPlanLinks         TherapyPlanBranch[]
  users                    User[]
  therapyPlans             TherapyPlan[]             @relation("TherapyPlanToBranch")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  password              String
  role                  Role                   @default(CLIENT)
  createdAt             DateTime               @default(now())
  phone                 String                 @unique
  branchId              String?
  appointments          Appointment[]
  ChatSession           ChatSession[]
  financialTransactions FinancialTransaction[]
  subscriptions         Subscription[]
  branch                Branch?                @relation(fields: [branchId], references: [id])
}

model Therapist {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  phone             String
  specialty         String
  createdAt         DateTime           @default(now())
  appointments      Appointment[]
  schedules         Schedule[]
  therapistBranches TherapistBranch[]
  therapistServices TherapistService[]
}

model TherapistBranch {
  id          String    @id @default(uuid())
  therapistId String
  branchId    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, branchId])
}

model Schedule {
  id          String    @id @default(uuid())
  therapistId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  branchId    String
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String                   @id @default(uuid())
  clientId    String
  therapistId String
  date        DateTime
  startTime   String
  endTime     String
  status      AppointmentStatus        @default(PENDING)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  branchId    String?
  noShowFee   Float?
  notes       String?
  serviceId   String?
  branch      Branch?                  @relation(fields: [branchId], references: [id])
  client      User                     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service     Service?                 @relation(fields: [serviceId], references: [id])
  therapist   Therapist                @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  consumption SubscriptionConsumption?
}

model ChatSession {
  id          String   @id @default(uuid())
  userId      String
  phoneNumber String   @unique
  history     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id         String             @id @default(uuid())
  question   String             @unique
  answer     String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  categoryId String?
  createdBy  String?
  enabled    Boolean            @default(true)
  tags       String[]
  viewCount  Int                @default(0)
  questions  FrequentQuestion[]
  category   KnowledgeCategory? @relation(fields: [categoryId], references: [id])
}

model KnowledgeCategory {
  id               String          @id @default(uuid())
  name             String          @unique
  description      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  knowledgeEntries KnowledgeBase[]
}

model FrequentQuestion {
  id             String         @id @default(uuid())
  question       String
  count          Int            @default(1)
  lastAskedAt    DateTime       @default(now())
  knowledgeId    String?
  autoDetected   Boolean        @default(true)
  knowledgeEntry KnowledgeBase? @relation(fields: [knowledgeId], references: [id])
}

model Service {
  id              String             @id @default(uuid())
  name            String             @unique
  description     String?
  price           Float
  averageDuration Int                @default(60)
  branchId        String?
  appointments    Appointment[]
  branch          Branch?            @relation(fields: [branchId], references: [id])
  therapists      TherapistService[]
}

model TherapistService {
  id          String    @id @default(uuid())
  therapistId String
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model TherapyPlan {
  id            String              @id @default(uuid())
  name          String
  description   String?
  totalSessions Int
  totalPrice    Float
  validityDays  Int
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  subscriptions Subscription[]
  branchLinks   TherapyPlanBranch[]
  branches      Branch[]            @relation("TherapyPlanToBranch")
}

model TherapyPlanBranch {
  id            String      @id @default(uuid())
  therapyPlanId String
  branchId      String
  createdAt     DateTime    @default(now())
  branch        Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  plan          TherapyPlan @relation(fields: [therapyPlanId], references: [id], onDelete: Cascade)

  @@unique([therapyPlanId, branchId])
}

model Subscription {
  id                String                    @id @default(uuid())
  clientId          String
  branchId          String?
  status            SubscriptionStatus        @default(ACTIVE)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  therapyPlanId     String
  startDate         DateTime                  @default(now())
  endDate           DateTime
  totalSessions     Int
  remainingSessions Int
  branch            Branch?                   @relation(fields: [branchId], references: [id])
  client            User                      @relation(fields: [clientId], references: [id])
  therapyPlan       TherapyPlan               @relation(fields: [therapyPlanId], references: [id])
  consumptions      SubscriptionConsumption[]
}

model SubscriptionConsumption {
  id             String       @id @default(uuid())
  subscriptionId String
  appointmentId  String       @unique
  branchId       String
  consumedAt     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  refundReason   String?
  wasRefunded    Boolean      @default(false)
  appointment    Appointment  @relation(fields: [appointmentId], references: [id])
  branch         Branch       @relation(fields: [branchId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model FinancialTransaction {
  id                String           @id @default(uuid())
  type              TransactionType
  amount            Float
  description       String
  category          String
  date              DateTime
  clientId          String?
  branchId          String?
  reference         String?
  referenceType     String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  paymentMethodId   String?
  financeCategoryId String?
  branch            Branch?          @relation(fields: [branchId], references: [id])
  client            User?            @relation(fields: [clientId], references: [id])
  financeCategory   FinanceCategory? @relation(fields: [financeCategoryId], references: [id])
  paymentMethod     PaymentMethod?   @relation(fields: [paymentMethodId], references: [id])
}

model FinanceCategory {
  id           String                 @id @default(uuid())
  name         String                 @unique
  type         TransactionType
  description  String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions FinancialTransaction[]
}

model PaymentMethod {
  id           String                 @id @default(uuid())
  name         String                 @unique
  description  String?
  isActive     Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  transactions FinancialTransaction[]
}

enum Role {
  ADMIN
  THERAPIST
  RECEPTIONIST
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  NO_SHOW
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELED
}

enum TransactionType {
  REVENUE
  EXPENSE
}
