import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  UseGuards,
  Req,
  ForbiddenException,
  Delete,
  Query,
  Patch,
  BadRequestException,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { TherapistsService } from './therapists.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { RolesGuard } from '../auth/roles.guard';
import { Roles } from '../auth/roles.decorator';

@Controller('therapists')
export class TherapistsController {
  constructor(private therapistsService: TherapistsService) {}

  // üîπ Apenas ADMIN pode cadastrar terapeutas
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('ADMIN')
  @Post()
  async createTherapist(
    @Body()
    body: {
      name: string;
      email: string;
      phone: string;
      specialty: string;
      branchIds?: string[]; // Nova lista de IDs de filiais
    },
  ) {
    return this.therapistsService.createTherapist(
      body.name,
      body.email,
      body.phone,
      body.specialty,
      body.branchIds,
    );
  }

  // üîπ Apenas usu√°rios autenticados podem listar terapeutas
  @UseGuards(JwtAuthGuard)
  @Get()
  async listTherapists(
    @Query('serviceId') serviceId?: string,
    @Query('branchId') branchId?: string, // Novo par√¢metro branchId
  ) {
    if (serviceId && branchId) {
      return this.therapistsService.listTherapistsByService(
        serviceId,
        branchId,
      );
    } else if (serviceId) {
      return this.therapistsService.listTherapistsByService(serviceId);
    } else if (branchId) {
      return this.therapistsService.listTherapists(branchId);
    }
    return this.therapistsService.listTherapists();
  }

  // üîπ Associar servi√ßo a terapeuta (ADMIN ou o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Post(':therapistId/services/:serviceId')
  async addServiceToTherapist(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Param('serviceId') serviceId: string,
  ) {
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode associar servi√ßos ao seu pr√≥prio perfil.',
      );
    }
    return this.therapistsService.addServiceToTherapist(therapistId, serviceId);
  }

  // üîπ Desassociar servi√ßo de terapeuta (ADMIN ou o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Delete(':therapistId/services/:serviceId')
  async removeServiceFromTherapist(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Param('serviceId') serviceId: string,
  ) {
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode desassociar servi√ßos do seu pr√≥prio perfil.',
      );
    }
    return this.therapistsService.removeServiceFromTherapist(
      therapistId,
      serviceId,
    );
  }

  // üîπ Apenas terapeutas podem definir sua pr√≥pria disponibilidade
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Post(':therapistId/schedule')
  async defineAvailability(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Body()
    body: {
      dayOfWeek: number;
      startTime: string;
      endTime: string;
      branchId: string; // Par√¢metro branchId obrigat√≥rio
      id?: string;      // ID opcional para edi√ß√£o
    },
  ) {
    try {
      // Verifica√ß√£o de permiss√£o
      if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
        throw new ForbiddenException(
          'Voc√™ s√≥ pode definir sua pr√≥pria disponibilidade.',
        );
      }

      // Valida√ß√£o b√°sica dos dados
      if (body.dayOfWeek < 0 || body.dayOfWeek > 6) {
        throw new BadRequestException('Dia da semana inv√°lido (0-6)');
      }

      if (!body.startTime || !body.endTime) {
        throw new BadRequestException('Hor√°rios de in√≠cio e fim s√£o obrigat√≥rios');
      }

      if (!body.branchId) {
        throw new BadRequestException('ID da filial √© obrigat√≥rio');
      }

      // Chamar o servi√ßo
      const result = await this.therapistsService.defineAvailability(
        therapistId,
        body.branchId,
        {
          dayOfWeek: body.dayOfWeek,
          startTime: body.startTime,
          endTime: body.endTime,
          id: body.id,
        },
      );

      return result;
    } catch (error) {
      // Tratar erros espec√≠ficos do servi√ßo
      if (error.message === 'O terapeuta n√£o pertence a esta filial') {
        throw new BadRequestException(error.message);
      }
      if (error.message === 'Hor√°rio n√£o encontrado') {
        throw new BadRequestException(error.message);
      }
      if (error.message === 'Voc√™ n√£o tem permiss√£o para editar este hor√°rio') {
        throw new ForbiddenException(error.message);
      }
      if (error.message === 'J√° existe um hor√°rio id√™ntico cadastrado') {
        throw new BadRequestException(error.message);
      }

      // Para outros erros n√£o mapeados
      throw new HttpException(
        error.message || 'Erro ao definir disponibilidade',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // üîπ Apenas usu√°rios autenticados podem ver a disponibilidade dos terapeutas
  @UseGuards(JwtAuthGuard)
  @Get(':therapistId/schedule')
  async getAvailability(
    @Param('therapistId') therapistId: string,
    @Query('branchId') branchId?: string, // Novo par√¢metro branchId opcional
  ) {
    return this.therapistsService.getAvailability(therapistId, branchId);
  }

  // üîπ Endpoints para gerenciar filiais do terapeuta

  // Listar filiais do terapeuta
  @UseGuards(JwtAuthGuard)
  @Get(':therapistId/branches')
  async getTherapistBranches(@Param('therapistId') therapistId: string) {
    return this.therapistsService.getTherapistBranches(therapistId);
  }

  // Adicionar terapeuta a uma filial (apenas ADMIN)
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('ADMIN')
  @Post(':therapistId/branches/:branchId')
  async addBranchToTherapist(
    @Param('therapistId') therapistId: string,
    @Param('branchId') branchId: string,
  ) {
    return this.therapistsService.addBranchToTherapist(therapistId, branchId);
  }

  // Remover terapeuta de uma filial (apenas ADMIN)
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('ADMIN')
  @Delete(':therapistId/branches/:branchId')
  async removeBranchFromTherapist(
    @Param('therapistId') therapistId: string,
    @Param('branchId') branchId: string,
  ) {
    return this.therapistsService.removeBranchFromTherapist(
      therapistId,
      branchId,
    );
  }

  // üîπ Buscar todos os hor√°rios do terapeuta em todas as filiais (para o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard)
  @Get('me/schedules/all')
  async getMyAllSchedules(@Req() req) {
    return this.therapistsService.getAllSchedules(req.user.sub);
  }

  // üîπ Buscar todos os hor√°rios de um terapeuta espec√≠fico em todas as filiais (para admins ou o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard)
  @Get(':therapistId/schedules/all')
  async getAllTherapistSchedules(
    @Req() req,
    @Param('therapistId') therapistId: string,
  ) {
    // Verificar se √© admin ou o pr√≥prio terapeuta
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode visualizar seus pr√≥prios hor√°rios.',
      );
    }
    return this.therapistsService.getAllSchedules(therapistId);
  }

  // üîπ Verificar conflitos de agenda em outras filiais
  @UseGuards(JwtAuthGuard)
  @Post(':therapistId/schedule/check-conflicts')
  async checkScheduleConflicts(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Body() scheduleData: {
      dayOfWeek: number;
      startTime: string;
      endTime: string;
      branchId: string;
      id?: string;
    },
  ) {
    // Verificar se √© admin ou o pr√≥prio terapeuta
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode verificar seus pr√≥prios hor√°rios.',
      );
    }
    return this.therapistsService.checkScheduleConflicts(therapistId, scheduleData);
  }

  // üîπ Buscar disponibilidade de um terapeuta para uma data espec√≠fica em uma filial
  @UseGuards(JwtAuthGuard)
  @Get(':therapistId/availability')
  async getTherapistAvailability(
    @Param('therapistId') therapistId: string,
    @Query('date') date: string,
    @Query('branchId') branchId?: string,
  ) {
    if (!date) {
      throw new BadRequestException('Data √© obrigat√≥ria');
    }
    return this.therapistsService.getAvailableTimeSlots(therapistId, date, branchId);
  }

  // üîπ Buscar disponibilidade de um terapeuta em todas as filiais para uma data
  @UseGuards(JwtAuthGuard)
  @Get(':therapistId/availability/all-branches')
  async getTherapistAvailabilityAcrossBranches(
    @Param('therapistId') therapistId: string,
    @Query('date') date: string,
  ) {
    if (!date) {
      throw new BadRequestException('Data √© obrigat√≥ria');
    }
    return this.therapistsService.getTherapistAvailabilityAcrossBranches(therapistId, date);
  }

  // üîπ Remover um hor√°rio de terapeuta (ADMIN ou o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard)
  @Delete(':therapistId/schedule/:scheduleId')
  async removeSchedule(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Param('scheduleId') scheduleId: string,
  ) {
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode remover seus pr√≥prios hor√°rios.',
      );
    }
    return this.therapistsService.removeSchedule(scheduleId, therapistId);
  }

  // üîπ Atualizar dados do terapeuta (ADMIN ou o pr√≥prio terapeuta)
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Patch(':therapistId')
  async updateTherapist(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Body()
    body: {
      name?: string;
      email?: string;
      phone?: string;
      specialty?: string;
    },
  ) {
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode atualizar seu pr√≥prio perfil.',
      );
    }
    return this.therapistsService.updateTherapist(therapistId, body);
  }

  // üîπ Remover todos os hor√°rios de um terapeuta em uma filial espec√≠fica
  @UseGuards(JwtAuthGuard)
  @Delete(':therapistId/schedule/branch/:branchId')
  async removeAllSchedulesFromBranch(
    @Req() req,
    @Param('therapistId') therapistId: string,
    @Param('branchId') branchId: string,
  ) {
    // Verificar se √© admin ou o pr√≥prio terapeuta
    if (req.user.role !== 'ADMIN' && req.user.sub !== therapistId) {
      throw new ForbiddenException(
        'Voc√™ s√≥ pode remover seus pr√≥prios hor√°rios.',
      );
    }
    
    try {
      return this.therapistsService.removeAllSchedulesFromBranch(therapistId, branchId);
    } catch (error) {
      if (error.message === 'O terapeuta n√£o pertence a esta filial') {
        throw new BadRequestException(error.message);
      }
      throw new HttpException(
        error.message || 'Erro ao excluir hor√°rios',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
