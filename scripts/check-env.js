#!/usr/bin/env node

/**
 * Script para verificar vari√°veis de ambiente
 */

require('dotenv').config();

const requiredVars = [
  'DATABASE_URL',
  'JWT_SECRET'
];

const optionalVars = [
  'META_WHATSAPP_TOKEN',
  'META_WHATSAPP_PHONE_ID', 
  'WHATSAPP_VERIFY_TOKEN',
  'OPENAI_API_KEY',
  'CONTEXT_PROMPT',
  'PINECONE_API_KEY',
  'PINECONE_ENV',
  'PINECONE_INDEX',
  'PORT',
  'NODE_ENV'
];

console.log('üîç Verificando vari√°veis de ambiente...\n');

// Verificar vari√°veis obrigat√≥rias
let missingRequired = [];
console.log('üìã Vari√°veis OBRIGAT√ìRIAS:');
requiredVars.forEach(varName => {
  const value = process.env[varName];
  const status = value ? '‚úÖ' : '‚ùå';
  const displayValue = value ? (value.length > 50 ? `${value.substring(0, 47)}...` : '***') : 'N√ÉO DEFINIDA';
  
  console.log(`  ${status} ${varName}: ${displayValue}`);
  
  if (!value) {
    missingRequired.push(varName);
  }
});

console.log('\nüìã Vari√°veis OPCIONAIS:');
optionalVars.forEach(varName => {
  const value = process.env[varName];
  const status = value ? '‚úÖ' : '‚ö†Ô∏è';
  const displayValue = value ? (value.length > 50 ? `${value.substring(0, 47)}...` : '***') : 'N√ÉO DEFINIDA';
  
  console.log(`  ${status} ${varName}: ${displayValue}`);
});

console.log('\nüìä RESUMO:');
console.log(`  ‚Ä¢ Vari√°veis obrigat√≥rias: ${requiredVars.length - missingRequired.length}/${requiredVars.length}`);
console.log(`  ‚Ä¢ Vari√°veis opcionais definidas: ${optionalVars.filter(v => process.env[v]).length}/${optionalVars.length}`);

if (missingRequired.length > 0) {
  console.log('\n‚ùå ERRO: Vari√°veis obrigat√≥rias n√£o encontradas:');
  missingRequired.forEach(varName => {
    console.log(`  - ${varName}`);
  });
  console.log('\nüí° Dica: Verifique seu arquivo .env');
  process.exit(1);
} else {
  console.log('\n‚úÖ Todas as vari√°veis obrigat√≥rias est√£o configuradas!');
}

// Verifica√ß√µes espec√≠ficas
console.log('\nüîç Verifica√ß√µes espec√≠ficas:');

// Database URL format
if (process.env.DATABASE_URL) {
  const dbUrl = process.env.DATABASE_URL;
  if (dbUrl.startsWith('postgresql://') || dbUrl.startsWith('postgres://')) {
    console.log('  ‚úÖ DATABASE_URL tem formato v√°lido');
  } else {
    console.log('  ‚ö†Ô∏è DATABASE_URL pode ter formato inv√°lido');
  }
}

// JWT Secret length
if (process.env.JWT_SECRET) {
  const jwtLength = process.env.JWT_SECRET.length;
  if (jwtLength >= 32) {
    console.log('  ‚úÖ JWT_SECRET tem tamanho adequado');
  } else {
    console.log('  ‚ö†Ô∏è JWT_SECRET muito curto (recomendado: 32+ caracteres)');
  }
}

// Context Prompt
if (process.env.CONTEXT_PROMPT) {
  const promptLength = process.env.CONTEXT_PROMPT.length;
  if (promptLength > 50) {
    console.log('  ‚úÖ CONTEXT_PROMPT est√° definido');
  } else {
    console.log('  ‚ö†Ô∏è CONTEXT_PROMPT muito curto');
  }
}

console.log('\nüéâ Verifica√ß√£o conclu√≠da!');