name: 🚨 Hotfix Deploy

on:
  push:
    branches:
      - 'hotfix/**'
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Nome da branch de hotfix'
        required: true
        type: string
      deploy_to_prod:
        description: 'Deploy direto para produção?'
        required: true
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # ============= VALIDAÇÃO RÁPIDA =============
  hotfix-validation:
    name: 🚨 Hotfix Quick Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Quick lint
        run: npm run lint
        
      - name: 🏗️ Build check
        run: npm run build
        
      - name: 🧪 Critical tests only
        run: |
          # Executar apenas testes críticos para hotfix
          npm run test -- --testPathPattern="critical|auth|finance"
          
      - name: 📊 Hotfix Summary
        run: |
          echo "## 🚨 Hotfix Validation" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for:** Emergency deployment" >> $GITHUB_STEP_SUMMARY

  # ============= DEPLOY STAGING (OBRIGATÓRIO) =============
  deploy-staging-hotfix:
    name: 🎭 Deploy Hotfix to Staging
    runs-on: ubuntu-latest
    needs: hotfix-validation
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Staging
        uses: railway-deploy/railway-deploy@v0.1.4
        with:
          api_token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
          service_id: ${{ secrets.RAILWAY_SERVICE_ID_STAGING }}
          environment_variables: |
            NODE_ENV=staging
            DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}
            JWT_SECRET=${{ secrets.JWT_SECRET_STAGING }}
            
      - name: 🔍 Staging Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.APP_URL_STAGING }}/api/health || exit 1
          
      - name: 🧪 Quick Smoke Tests
        run: |
          # Testes de fumaça rápidos
          curl -f ${{ secrets.APP_URL_STAGING }}/api
          curl -f ${{ secrets.APP_URL_STAGING }}/api/auth
          
      - name: 📧 Notify - Staging Deploy
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#hotfix'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 **HOTFIX DEPLOYED TO STAGING**
            
            **Branch:** ${{ github.ref_name }}
            **Status:** ${{ job.status }}
            **URL:** ${{ secrets.APP_URL_STAGING }}
            
            Ready for production approval! 🚀

  # ============= DEPLOY PRODUÇÃO (COM APROVAÇÃO) =============
  deploy-production-hotfix:
    name: 🌟 Deploy Hotfix to Production
    runs-on: ubuntu-latest
    needs: deploy-staging-hotfix
    if: ${{ github.event.inputs.deploy_to_prod == 'true' || contains(github.event.head_commit.message, '[deploy-prod]') }}
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Production
        uses: railway-deploy/railway-deploy@v0.1.4
        with:
          api_token: ${{ secrets.RAILWAY_TOKEN_PROD }}
          service_id: ${{ secrets.RAILWAY_SERVICE_ID_PROD }}
          environment_variables: |
            NODE_ENV=production
            DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}
            JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}
            META_WHATSAPP_TOKEN=${{ secrets.META_WHATSAPP_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            
      - name: 🔍 Production Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.APP_URL_PROD }}/api/health || exit 1
          
      - name: 🧪 Critical Production Tests
        run: |
          # Testes críticos em produção
          curl -f ${{ secrets.APP_URL_PROD }}/api
          curl -f ${{ secrets.APP_URL_PROD }}/api/finance/categories
          
      - name: 📊 Create Hotfix Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: hotfix-v${{ github.run_number }}
          release_name: 🚨 Hotfix Release v${{ github.run_number }}
          body: |
            ## 🚨 Emergency Hotfix Release
            
            **Branch:** ${{ github.ref_name }}
            **Deployed:** ${{ github.event.head_commit.timestamp }}
            **Urgency:** HIGH PRIORITY
            
            ### Fix Description
            ${{ github.event.head_commit.message }}
            
            ### Validation
            - ✅ Staging tests passed
            - ✅ Production health check passed
            - ✅ Critical functionality verified
            
            **URL:** ${{ secrets.APP_URL_PROD }}
            
          draft: false
          prerelease: false
          
      - name: 📧 Notify - Production Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#critical'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🎉 **HOTFIX SUCCESSFULLY DEPLOYED TO PRODUCTION!** 🎉
            
            ✅ **Status:** Live
            🌐 **URL:** ${{ secrets.APP_URL_PROD }}
            🏷️ **Release:** hotfix-v${{ github.run_number }}
            👤 **Deployed by:** ${{ github.actor }}
            
            Issue has been resolved! 🚀
            
      - name: 📧 Notify - Production Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 **HOTFIX DEPLOYMENT TO PRODUCTION FAILED!** 🚨
            
            ❌ **Status:** FAILED
            🔄 **Rollback:** Required immediately
            👤 **Author:** ${{ github.actor }}
            
            🚨 **IMMEDIATE ACTION REQUIRED!** 🚨

  # ============= MERGE DE VOLTA =============
  merge-back:
    name: 🔄 Merge Back to Main
    runs-on: ubuntu-latest
    needs: deploy-production-hotfix
    if: success()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔄 Create PR to merge back
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Merge hotfix: ${context.ref.replace('refs/heads/', '')}`,
              head: context.ref.replace('refs/heads/', ''),
              base: 'main',
              body: `
              ## 🔄 Hotfix Merge Back
              
              This PR merges the hotfix back to main branch.
              
              **Hotfix Branch:** ${context.ref.replace('refs/heads/', '')}
              **Status:** ✅ Successfully deployed to production
              **Release:** hotfix-v${context.runNumber}
              
              ### Changes
              ${context.payload.head_commit.message}
              
              **Auto-generated after successful hotfix deployment**
              `
            });
            
            console.log('Created PR:', pr.html_url);