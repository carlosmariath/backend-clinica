name: ðŸš€ Azure AKS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  IMAGE_NAME: backend-clinica

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Build and push Docker image
      run: |
        # Login no ACR
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
        
        # Build da imagem
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
        
        # Push da imagem
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="prod"
        else
          NAMESPACE="dev"
        fi
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

    - name: Create database secret
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="prod"
        else
          NAMESPACE="dev"
        fi
        kubectl create secret generic db-secret \
          --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --namespace=$NAMESPACE \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="prod"
          REPLICAS="2"
        else
          NAMESPACE="dev"
          REPLICAS="1"
        fi
        
        # Substituir variÃ¡veis nos manifestos
        sed -i "s|{{IMAGE}}|${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|{{NAMESPACE}}|$NAMESPACE|g" k8s/deployment.yaml
        sed -i "s|{{REPLICAS}}|$REPLICAS|g" k8s/deployment.yaml
        sed -i "s|{{NAMESPACE}}|$NAMESPACE|g" k8s/service.yaml
        
        # Aplicar manifestos
        kubectl apply -f k8s/ -n $NAMESPACE