name: 🚀 Azure AKS CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy manual'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.ACR_NAME }}
  IMAGE_NAME: backend-clinica
  NODE_VERSION: '20'

jobs:
  # ============= LINT E TESTES =============
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run linting
        run: npm run lint:check
        
      - name: 💅 Check formatting
        run: npm run format:check
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: |
          npx prisma migrate deploy
          npm run seed
          
      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret
        run: |
          npm run test:cov
          npm run test:e2e
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ============= BUILD E PUSH IMAGEM =============
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🔒 Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============= DEPLOY DEVELOPMENT =============
  deploy-dev:
    name: 🔧 Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🔧 Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: 🔐 Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing
            
      - name: 🔧 Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: 🗄️ Update database secrets
        run: |
          kubectl create secret generic dev-backend-clinica-secrets \
            --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL_DEV }}" \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET_DEV }}" \
            --from-literal=META_WHATSAPP_TOKEN="${{ secrets.META_WHATSAPP_TOKEN }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --namespace=clinica-dev \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: 🔄 Update image tag
        run: |
          cd k8s/dev
          kustomize edit set image backend-clinica=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
      - name: 🚀 Deploy to AKS Dev
        run: |
          kustomize build k8s/dev | kubectl apply -f -
          
      - name: ⏳ Wait for deployment
        run: |
          kubectl rollout status deployment/dev-backend-clinica \
            --namespace=clinica-dev \
            --timeout=300s
            
      - name: 🔍 Health check
        run: |
          # Aguardar pods ficarem prontos
          kubectl wait --for=condition=ready pod \
            -l app=backend-clinica \
            --namespace=clinica-dev \
            --timeout=300s
            
          # Fazer port-forward temporário para teste
          kubectl port-forward service/dev-backend-clinica-service 8080:80 \
            --namespace=clinica-dev &
          sleep 10
          
          # Teste de health
          curl -f http://localhost:8080/api/health || exit 1
          
      - name: 📧 Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ✅ **DEV DEPLOYMENT SUCCESSFUL**
            
            **Environment:** Development
            **Image:** ${{ github.sha }}
            **URL:** https://api-dev.clinica.com
            **Deployed by:** ${{ github.actor }}

  # ============= DEPLOY PRODUCTION =============
  deploy-prod:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🔧 Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: 🔐 Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing
            
      - name: 🔧 Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: 🗄️ Update database secrets
        run: |
          kubectl create secret generic prod-backend-clinica-secrets \
            --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL_PROD }}" \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET_PROD }}" \
            --from-literal=META_WHATSAPP_TOKEN="${{ secrets.META_WHATSAPP_TOKEN }}" \
            --from-literal=META_WHATSAPP_PHONE_ID="${{ secrets.META_WHATSAPP_PHONE_ID }}" \
            --from-literal=WHATSAPP_VERIFY_TOKEN="${{ secrets.WHATSAPP_VERIFY_TOKEN }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            --from-literal=PINECONE_ENV="${{ secrets.PINECONE_ENV }}" \
            --from-literal=PINECONE_INDEX="${{ secrets.PINECONE_INDEX }}" \
            --namespace=clinica-prod \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: 🔄 Update image tag
        run: |
          cd k8s/prod
          kustomize edit set image backend-clinica=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
      - name: 🚀 Deploy to AKS Production
        run: |
          kustomize build k8s/prod | kubectl apply -f -
          
      - name: ⏳ Wait for deployment
        run: |
          kubectl rollout status deployment/prod-backend-clinica \
            --namespace=clinica-prod \
            --timeout=600s
            
      - name: 🔍 Health check
        run: |
          # Aguardar pods ficarem prontos
          kubectl wait --for=condition=ready pod \
            -l app=backend-clinica \
            --namespace=clinica-prod \
            --timeout=300s
            
          # Fazer port-forward temporário para teste
          kubectl port-forward service/prod-backend-clinica-service 8080:80 \
            --namespace=clinica-prod &
          sleep 10
          
          # Teste de health
          curl -f http://localhost:8080/api/health || exit 1
          
      - name: 🧪 Run smoke tests
        run: |
          # Testes básicos de endpoints
          kubectl port-forward service/prod-backend-clinica-service 8080:80 \
            --namespace=clinica-prod &
          sleep 5
          
          # Teste endpoints críticos
          curl -f http://localhost:8080/api || exit 1
          curl -f http://localhost:8080/api/finance/categories || exit 1
          
      - name: 📊 Create GitHub Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: 🚀 Production Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Release v${{ github.run_number }}
            
            **Deployed to:** Azure Kubernetes Service
            **Image:** ${{ github.sha }}
            **Namespace:** clinica-prod
            **URL:** https://api.clinica.com
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Infrastructure
            - **Container Registry:** ${{ secrets.ACR_LOGIN_SERVER }}
            - **Kubernetes Cluster:** ${{ secrets.AKS_CLUSTER_NAME }}
            - **Resource Group:** ${{ secrets.AZURE_RESOURCE_GROUP }}
            
          draft: false
          prerelease: false
          
      - name: 📧 Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🎉 **PRODUCTION DEPLOYMENT SUCCESSFUL!** 🎉
            
            **Environment:** Production
            **Image:** ${{ github.sha }}
            **URL:** https://api.clinica.com
            **Release:** v${{ github.run_number }}
            **Deployed by:** ${{ github.actor }}
            
            🚀 Live and running on Azure AKS!
            
      - name: 📧 Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#critical'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 **PRODUCTION DEPLOYMENT FAILED!** 🚨
            
            **Environment:** Production
            **Image:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            🚨 **IMMEDIATE ROLLBACK MAY BE REQUIRED!** 🚨

  # ============= SECURITY SCAN =============
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
        
      - name: 🔒 Kubernetes security scan
        run: |
          # Instalar kubesec
          wget https://github.com/controlplaneio/kubesec/releases/download/v2.12.0/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          sudo mv kubesec /usr/local/bin/
          
          # Scan dos manifests
          kustomize build k8s/base | kubesec scan -
          
      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            snyk-results.json
            kubesec-results.json
          retention-days: 30