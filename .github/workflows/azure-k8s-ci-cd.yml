name: Deploy to AKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  IMAGE_NAME: backend-clinica

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Build and push Docker image
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }} .
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:dev-latest .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:dev-latest

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Create namespace and secrets
      run: |
        kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic db-secret \
          --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --namespace=dev \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to DEV
      run: |
        # Criar deployment tempor√°rio
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend-clinica
          namespace: dev
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: backend-clinica
          template:
            metadata:
              labels:
                app: backend-clinica
            spec:
              containers:
              - name: backend-clinica
                image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
                ports:
                - containerPort: 80
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: db-secret
                      key: DATABASE_URL
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-clinica-service
          namespace: dev
        spec:
          selector:
            app: backend-clinica
          ports:
          - protocol: TCP
            port: 80
            targetPort: 80
          type: LoadBalancer
        EOF

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Build and push Docker image
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }} .
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:prod-latest .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:prod-latest

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Create namespace and secrets
      run: |
        kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic db-secret \
          --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --namespace=prod \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to PROD
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend-clinica
          namespace: prod
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: backend-clinica
          template:
            metadata:
              labels:
                app: backend-clinica
            spec:
              containers:
              - name: backend-clinica
                image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}
                ports:
                - containerPort: 80
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: db-secret
                      key: DATABASE_URL
                resources:
                  requests:
                    memory: "512Mi"
                    cpu: "500m"
                  limits:
                    memory: "1Gi"
                    cpu: "1000m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-clinica-service
          namespace: prod
        spec:
          selector:
            app: backend-clinica
          ports:
          - protocol: TCP
            port: 80
            targetPort: 80
          type: LoadBalancer
        EOF