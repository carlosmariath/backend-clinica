name: 🧪 Test Coverage & Quality

on:
  schedule:
    # Executar diariamente às 2:00 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, master, develop]
    paths:
      - 'src/**'
      - 'test/**'
      - 'prisma/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # ============= TESTES COMPLETOS =============
  comprehensive-tests:
    name: 🧪 Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: |
          npx prisma migrate deploy
          npm run seed
          
      - name: 🧪 Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:cov
          
      - name: 🧪 Run integration tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret
          REDIS_URL: redis://localhost:6379
        run: |
          npm run test:e2e
          
      - name: 📊 Generate test report
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          
          # Ler coverage summary se existir
          if [ -f coverage/lcov-report/index.html ]; then
            echo "Coverage report generated ✅" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Test Files" >> $GITHUB_STEP_SUMMARY
          find test/ -name "*.spec.ts" -o -name "*.test.ts" | wc -l >> $GITHUB_STEP_SUMMARY
          echo " test files found" >> $GITHUB_STEP_SUMMARY
          
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
            jest-report.json
          retention-days: 30

  # ============= TESTES DE PERFORMANCE =============
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: |
          npm ci
          npm install -g artillery clinic autocannon
          
      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: |
          npx prisma migrate deploy
          npm run seed
          
      - name: 🚀 Start application
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: |
          npm run build
          npm start &
          sleep 10
          
      - name: ⚡ Run load tests
        run: |
          # Teste de carga básico
          autocannon -c 10 -d 30 -R 100 http://localhost:3000/api/health
          
          # Teste específico para endpoints da API
          autocannon -c 5 -d 15 -R 50 http://localhost:3000/api/finance/categories
          
      - name: 📊 Performance Report
        run: |
          echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Load tests completed for:" >> $GITHUB_STEP_SUMMARY
          echo "- Health endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- Finance categories endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- Database connection performance" >> $GITHUB_STEP_SUMMARY

  # ============= ANÁLISE DE QUALIDADE =============
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
          
      - name: 📏 Code complexity analysis
        run: |
          # Instalar ferramenta de análise de complexidade
          npm install -g complexity-report
          
          # Gerar relatório de complexidade
          complexity-report -o complexity-report.json src/
          
      - name: 📊 Technical debt analysis
        run: |
          echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          
          # Contar linhas de código
          echo "### Lines of Code" >> $GITHUB_STEP_SUMMARY
          find src/ -name "*.ts" -exec wc -l {} + | tail -1 >> $GITHUB_STEP_SUMMARY
          
          # Contar arquivos
          echo "### File Count" >> $GITHUB_STEP_SUMMARY
          find src/ -name "*.ts" | wc -l >> $GITHUB_STEP_SUMMARY
          echo " TypeScript files" >> $GITHUB_STEP_SUMMARY
          
          # TODO count
          echo "### Technical Debt" >> $GITHUB_STEP_SUMMARY
          grep -r "TODO\|FIXME\|HACK" src/ | wc -l >> $GITHUB_STEP_SUMMARY
          echo " TODO/FIXME items found" >> $GITHUB_STEP_SUMMARY

  # ============= TESTES DE SEGURANÇA =============
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔒 Run npm audit
        run: |
          npm audit --audit-level=high --json > audit-results.json || true
          
      - name: 🔒 Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json
        continue-on-error: true
        
      - name: 🔒 OWASP ZAP security scan
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Executar apenas em main/master para economizar recursos
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:3000 \
            -J zap-report.json \
            -r zap-report.html
        continue-on-error: true
        
      - name: 📊 Security Report
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Vulnerability Scans Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ npm audit" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Snyk scan" >> $GITHUB_STEP_SUMMARY
          if [ -f zap-report.json ]; then
            echo "- ✅ OWASP ZAP scan" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-results.json
            snyk-results.json
            zap-report.*
          retention-days: 30

  # ============= RELATÓRIO FINAL =============
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, code-quality, security-tests]
    if: always()
    
    steps:
      - name: 📊 Generate final report
        run: |
          echo "# 🧪 Complete Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tests:** ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ (needs.comprehensive-tests.result == 'success' && needs.performance-tests.result == 'success') && '✅ PASSED' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 📧 Notify team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#quality-assurance'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 **TEST SUITE FAILURE DETECTED** 🚨
            
            Some tests failed in the comprehensive test suite.
            Please check the workflow results and fix issues.
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}